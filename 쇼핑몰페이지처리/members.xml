<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="members">
    <!-- 회원 정보 저장 -->
    <insert id="membersjoin" parameterType="Map">
        <selectKey keyProperty="mb_idx" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO members(mb_name, mb_id, mb_pwd, mb_gender,
        mb_email, mb_phone, mb_rank, mb_birth, mb_status, mb_reg_date, join_type)
        VALUES(#{mb_name}, #{mb_id}, #{mb_pwd}, #{mb_gender},
        #{mb_email}, #{mb_phone}, 0, #{mb_birth}, 1, now(), #{join_type})
    </insert>
    <!-- 비밀번호를 제외한 모든 정보 가져오는 쿼리
    용준: 이거 안써도 되긴하는데 다른사람 쓸까봐 혹시 몰라서 남김-->
    <select id="getAll" resultType="mybatis.vo.MembersVO">
        SELECT
        mb_idx, mb_name, mb_id, mb_gender, mb_email, mb_phone,
        mb_rank, mb_birth, mb_status, mb_reg_date
        FROM members
    </select>
<!--  ====== 윤서 =======  -->
    <!-- 나의 프로필(로그인)정보 불러오기 -->
    <select id="login_information" resultType="mybatis.vo.MembersVO" parameterType="String">
        SELECT * FROM members
        WHERE mb_idx = #{mb_idx}
    </select>

    <!-- 유저 정보 수정 -->
    <update id="updateMem" parameterType="map">
        UPDATE members
        <set>
            <choose>
                <when test="type == 0">
                    mb_email = #{value}
                </when>
                <when test="type == 1">
                    mb_pwd = #{value}
                </when>
                <when test="type == 2">
                    mb_phone = #{value}
                </when>
            </choose>
        </set>
        WHERE mb_idx = #{mb_idx}
    </update>
    <!-- 유저 회원 탈퇴 -->
    <update id="withdraw" parameterType="String">
        UPDATE members
        SET mb_status = 0
        WHERE mb_idx = #{mb_idx}
    </update>


<!-- ============================ -->
    <!-- 관리자모드 회원관리에서 검색을 위한 쿼리-->
    <select id="search" resultType="mybatis.vo.MembersVO" parameterType="map">
        SELECT * FROM members
        WHERE mb_status = 1
        <choose>
            <when test="type == 'mb_name'"> AND mb_name LIKE #{keyword} </when>
            <when test="type == 'mb_id'"> AND mb_id LIKE #{keyword} </when>
            <when test="type == 'mb_email'"> AND mb_email LIKE #{keyword} </when>
            <when test="type == 'mb_rank'"> AND mb_rank LIKE #{keyword} </when>
            <when test="type == 'mb_idx'"> AND mb_idx = #{keyword} </when>
        </choose>
    </select>

    <!-- 유저의 주소 저장  -->
    <insert id="insertAddress" parameterType="Map">
        INSERT INTO address(ar_mb_idx, ar_addr1, ar_addr2, ar_zip_code, ar_name, ar_phone)
        VALUES(#{ar_mb_idx}, #{ar_addr1}, #{ar_addr2}, #{ar_zip_code}, #{ar_name}, #{ar_phone})
    </insert>


<!-- 관리자모드에서의 사용자 추가-->
    <insert id="insert" parameterType="map">
        INSERT INTO members
        (mb_name, mb_id, mb_pwd, mb_gender, mb_email,
        mb_phone, mb_rank, mb_birth, mb_status, mb_reg_date, join_type)
        VALUES
        (#{mb_name}, #{mb_id}, #{mb_pwd}, #{mb_gender}, #{mb_email},
        #{mb_phone}, #{mb_rank}, #{mb_birth}, #{mb_status}, NOW(),'local' )
    </insert>

    <!-- 아래 2개는 중복 검사를 위한 쿼리   -->
    <select id="checkDuplicateId" resultType="int" parameterType="String">
        SELECT COUNT(*) FROM members WHERE mb_id = #{mb_id}
    </select>

    <select id="checkDuplicateEmail" resultType="int" parameterType="String">
        SELECT COUNT(*) FROM members WHERE mb_email = #{mb_email}
    </select>

    <!-- 아이디 유효성 검사를 위한 Mapper -->
    <select id="isIdExist" parameterType="String" resultType="String">
        SELECT mb_id FROM members WHERE mb_id = #{mb_id}
    </select>


    <select id="selectPagedMembers" parameterType="map" resultType="mybatis.vo.MembersVO">
        SELECT
            mb_idx, mb_name, mb_id, mb_gender, mb_email, mb_phone,
            mb_rank, mb_birth, mb_status, mb_reg_date
        FROM members
        WHERE mb_status = 1
        ORDER BY mb_idx DESC
        LIMIT #{start}, #{pageSize}
    </select>

<!--  페이지 계산을 위해 전체 회원-->
    <select id="countAllMembers" resultType="int">
        SELECT COUNT(*) FROM members
        WHERE mb_status = 1
    </select>

<!--   회원 삭제를 위한 쿼리 아래 open은
WHERE mb_idx IN (12, 15, 22) 이것과 같음-->
    <update id="deleteMembers" parameterType="list">
        UPDATE members
        SET mb_status = 0
        WHERE mb_idx IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>


    <!-- 로그인 유효성 검사를 위한 Mapper -->
    <!-- 모든 정보를 조회하고 가져오는 이유는 로그인한 회원의 정보를 세션에 담거나 뷰에 뿌릴 수 있도록 전체 컬럼을 미리 조회한다.   -->
    <select id="checkLogin" parameterType="Map" resultType="mybatis.vo.MembersVO">
        SELECT
            mb_idx, mb_name, mb_id, mb_gender, mb_email, mb_phone,
            mb_rank, mb_birth, mb_status, mb_reg_date
        FROM members
        WHERE mb_id = #{mb_id} AND mb_pwd = #{mb_pwd} AND mb_status = 1
    </select>


<!--검색 결과 + 페이지 가져오기 위한 쿼리-->
    <select id="searchPagedMembers" parameterType="map" resultType="mybatis.vo.MembersVO">
        SELECT
        mb_idx, mb_name, mb_id, mb_gender, mb_email, mb_phone,
        mb_rank, mb_birth, mb_status, mb_reg_date
        FROM members
        WHERE mb_status = 1
        <choose>
            <when test="type == 'mb_name'"> AND mb_name LIKE #{keyword} </when>
            <when test="type == 'mb_id'"> AND mb_id LIKE #{keyword} </when>
            <when test="type == 'mb_email'"> AND mb_email LIKE #{keyword} </when>
            <when test="type == 'mb_rank'"> AND mb_rank LIKE #{keyword} </when>
        </choose>
        ORDER BY mb_idx DESC
        LIMIT #{start}, #{pageSize}
    </select>

<!--검색 결과 총 값을 가져오기 위한 쿼리-->
    <select id="countSearchedMembers" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM members
        WHERE mb_status = 1
        <choose>
            <when test="type == 'mb_name'"> AND mb_name LIKE #{keyword} </when>
            <when test="type == 'mb_id'"> AND mb_id LIKE #{keyword} </when>
            <when test="type == 'mb_email'"> AND mb_email LIKE #{keyword} </when>
            <when test="type == 'mb_rank'"> AND mb_rank LIKE #{keyword} </when>
        </choose>
    </select>

<!--  멤버 수정을 위한 쿼리임 쇼핑 등급 & 상태만 수정 가능-->
    <update id="updateRankAndStatus" parameterType="map">
        UPDATE members
        SET
        mb_rank = #{mb_rank},
        mb_status = #{mb_status}
        WHERE mb_idx = #{mb_idx}
    </update>





</mapper>